buildscript {
    ext {
        springBootVersion = '1.5.10.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

ext {
    springCloudVersion = 'Edgware.RELEASE'
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: "io.spring.dependency-management"


jar {
    baseName = 'paas-ta-portal-api'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
dependencies {
    //Admin Server Setting
    compile ('de.codecentric:spring-boot-admin-starter-client:1.5.7')

    //Config Server Setting
    compile('org.springframework.cloud:spring-cloud-starter-config')

    //Eureka
    compile ('org.springframework.cloud:spring-cloud-starter-eureka')

    //DB
    compile ('org.springframework.boot:spring-boot-starter-jdbc')
    compile ('commons-dbcp:commons-dbcp:1.4')
    compile ('mysql:mysql-connector-java:5.0.8')
    compile ('javax.servlet:javax.servlet-api:3.1.0')
    compile ('org.mybatis:mybatis-spring:1.2.4')
    compile ('org.mybatis:mybatis:3.3.1')
    compile ('org.postgresql:postgresql')
    compile ('org.hamcrest:hamcrest-all:1.3')
    compile ('org.aspectj:aspectjweaver:1.8.9')
    //Mail
    compile ('org.springframework.boot:spring-boot-starter-mail')
    compile group: 'javax.mail', name: 'mail', version: '1.5.0-b01'
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.12'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.9.2'

    compile ('org.flywaydb:flyway-core:4.0.3')
    compile ('com.googlecode.json-simple:json-simple:1.1.1')

    //glusterFS
    compile ('org.javaswift:joss:0.9.12')

    //cloud foundry client
    compile ('org.cloudfoundry:cloudfoundry-client:3.9.0.RELEASE') //추가
    compile ('org.cloudfoundry:cloudfoundry-client-lib:1.1.3')
    compile ('org.cloudfoundry:cloudfoundry-client-reactor:3.9.0.RELEASE')
    compile ('org.cloudfoundry:cloudfoundry-operations:3.9.0.RELEASE')
    compile ('io.projectreactor:reactor-core:3.1.7.RELEASE')
    compile ('io.projectreactor.ipc:reactor-netty:0.7.7.RELEASE')

    // https://mvnrepository.com/artifact/com.corundumstudio.socketio/netty-socketio
    compile group: 'com.corundumstudio.socketio', name: 'netty-socketio', version: '1.7.14'


    //cloud foundry uaa
    compile files('libs/uaa-java-client-1.0.2-SNAPSHOT.jar')
    compile ('org.cloudfoundry.identity:cloudfoundry-identity-scim:2.7.4'){
        exclude group: 'org.slf4j'
    }


    //hystrix
    compile('org.springframework.cloud:spring-cloud-starter-hystrix:1.4.4.RELEASE')
    compile('org.springframework.boot:spring-boot-starter-actuator')




    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.jayway.jsonpath:json-path')
    testCompile group: 'javax.mail', name: 'mail', version: '1.5.0-b01'
    testCompile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.12'
    testCompile group: 'org.jsoup', name: 'jsoup', version: '1.9.2'

}


apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.9+"
}

test {
    ignoreFailures=true
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco-overall.exec")
    }
}

/* 
// windows only
task pathingJar(type: Jar) {
    dependsOn configurations.runtime
    appendix = 'pathing'

    doFirst {
       manifest {
           attributes "Class-Path": configurations.runtime.files.collect {it.toURL().toString().replaceFirst("file:/", '/')}.join(" ")
       }
   }
}

bootRun {
   dependsOn pathingJar
   jvmArgs = [ '-server', '-Xmx256m', '-Dspring.profiles.active=local', '-Deureka.client.enabled=false', '-Dspring.cloud.config.enabled=false', '-Dspring.config.location=C:/paasta-workspace/official/PAAS-TA-PORTAL-CONFIG-DATA/PortalApi.yml', '-Dio.netty.leakDetectionLevel=PARANOID' ]
   doFirst {
       // classpath = files("$buildDir/classes/main", "$buildDir/resources/main", pathingJar.archivePath)
       classpath = files(sourceSets.main.output.files, pathingJar.archivePath)
   }
} 
*/
